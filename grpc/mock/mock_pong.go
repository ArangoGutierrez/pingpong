// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ArangoGutierrez/pingpong/grpc/pong (interfaces: PongServiceClient,PongService_PingPongRPCClient)

// Package mock_pong is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pong "github.com/ArangoGutierrez/pingpong/grpc/pong"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPongServiceClient is a mock of PongServiceClient interface
type MockPongServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPongServiceClientMockRecorder
}

// MockPongServiceClientMockRecorder is the mock recorder for MockPongServiceClient
type MockPongServiceClientMockRecorder struct {
	mock *MockPongServiceClient
}

// NewMockPongServiceClient creates a new mock instance
func NewMockPongServiceClient(ctrl *gomock.Controller) *MockPongServiceClient {
	mock := &MockPongServiceClient{ctrl: ctrl}
	mock.recorder = &MockPongServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPongServiceClient) EXPECT() *MockPongServiceClientMockRecorder {
	return m.recorder
}

// PingPongRPC mocks base method
func (m *MockPongServiceClient) PingPongRPC(arg0 context.Context, arg1 ...grpc.CallOption) (pong.PongService_PingPongRPCClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPongRPC", varargs...)
	ret0, _ := ret[0].(pong.PongService_PingPongRPCClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPongRPC indicates an expected call of PingPongRPC
func (mr *MockPongServiceClientMockRecorder) PingPongRPC(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPongRPC", reflect.TypeOf((*MockPongServiceClient)(nil).PingPongRPC), varargs...)
}

// MockPongService_PingPongRPCClient is a mock of PongService_PingPongRPCClient interface
type MockPongService_PingPongRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockPongService_PingPongRPCClientMockRecorder
}

// MockPongService_PingPongRPCClientMockRecorder is the mock recorder for MockPongService_PingPongRPCClient
type MockPongService_PingPongRPCClientMockRecorder struct {
	mock *MockPongService_PingPongRPCClient
}

// NewMockPongService_PingPongRPCClient creates a new mock instance
func NewMockPongService_PingPongRPCClient(ctrl *gomock.Controller) *MockPongService_PingPongRPCClient {
	mock := &MockPongService_PingPongRPCClient{ctrl: ctrl}
	mock.recorder = &MockPongService_PingPongRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPongService_PingPongRPCClient) EXPECT() *MockPongService_PingPongRPCClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockPongService_PingPongRPCClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockPongService_PingPongRPCClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockPongService_PingPongRPCClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPongService_PingPongRPCClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).Context))
}

// Header mocks base method
func (m *MockPongService_PingPongRPCClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockPongService_PingPongRPCClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).Header))
}

// Recv mocks base method
func (m *MockPongService_PingPongRPCClient) Recv() (*pong.PongData, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pong.PongData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockPongService_PingPongRPCClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockPongService_PingPongRPCClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPongService_PingPongRPCClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockPongService_PingPongRPCClient) Send(arg0 *pong.PongData) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPongService_PingPongRPCClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockPongService_PingPongRPCClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPongService_PingPongRPCClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockPongService_PingPongRPCClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockPongService_PingPongRPCClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPongService_PingPongRPCClient)(nil).Trailer))
}
